class Main {
  public static void main(String[] args) {
    System.out.println("Hello Java"); //処理地
  }
}

class Main {
  public static void main(String[] args) {
  <!--変数定義と同時に値を代入することを変数の初期化-->
    // int型の変数numberを定義してください
    int number;
    
    
    // 変数numberに3を代入してください
    number = 3;
    
    // 変数numberを出力してください
    System.out.println(number);

    // String型の変数nameを定義してください
    String name;
    
    // 変数nameに"Wanko"を代入してください
    name = "Wanko";
    
    // 変数nameを出力してください
    System.out.println(name);
    
    
    // 変数の更新
    number = 1;
    name = "Java";
    
    //変数（小数）を定義
    double number2 = 3.14;
    
    System.out.prontln(5/2); // 2,int型で出てしまう
    System.out.println(5.0/2.0)　// 2.5, double型で出る
    
    int number1 = 5;
    int number2 = 2;
    
    System.out.prontln(number1/number2);  //答え　2
                         5    /   2
                         
    System.out.prontln((double)number1/number2); //答え　2.5
                                 5.0  /   2.0
                                 
    真偽値には「true」と「false」という2つの値しか存在しません。
    trueは真（正しい）、falseは偽（間違っている）を意味します。
    真偽値のデータ型はboolean型です。
    true, falseにはダブルクォーテーションは付けない   
    
    boolen bool = 6>2; // 解　true
    boolen bool = 6<2; //　解　false
    
    System.out.prontln(true && false);  //解　false
    System.out.prontln(true || false);  //解  true
    
    // 条件式に直接trueをいれてください
    if (true) {
      System.out.println("条件式がtrueのため、出力されます");
    }
    
    // 条件式に直接falseをいれてください
    if (false) {
      System.out.println("条件式がfalseのため、出力されません");
    }elseif(){
    
    }else{
    
  }
  
  int number = 8;
  switch (number%2){
    case 0:
      System.out.println("偶数である");
      break;
    
    case 1:
      System.out.println("奇数である");
      break;
    
    default:
      System.out.println("該当なし");
      break;
  }
  
  int number = 1;
  while(i<=5){
      System.out.println(number);
      number++;
      //解　1.2.3.4.5
  }
  
  System.out.println("=== while文 ===");
    int i = 1;
    while (i < 10) {
      // iが5の倍数のとき、繰り返し処理を終了してください
      if(i%5==0){
        break;
      }
      
      System.out.println(i);  //1,2,3,4
      i++;
    }
    
    System.out.println("=== for文 ===");
    for (int j = 1; j < 10; j++) {
      // jが3の倍数のとき、処理をスキップしてください
      if(j%3==0){
        continue;
      }
      
      System.out.println(j); //1,2,4,5,7,8,10
    }
    
    // 変数namesに、配列を代入してください
    String[] names = {"にんじゃわんこ","ひつじ仙人","ベイビーわんこ"};
    
    // インデックス番号が0の要素を出力してください
    System.out.println(names[0]);
    
    // インデックス番号が2の要素を出力してください
    System.out.println(names[2]);
    
    
    
    
    // 変数languagesを定義し、配列を代入してください
    String[] languages = {"Ruby", "PHP", "Python"};
    
    // インデックス番号が「1」の要素を出力してください
    System.out.println(languages[1]);
    
    // インデックス番号が「1」の要素を「Java」で上書きしてください
    languages[1] = "Java";
    
    // インデックス番号が「1」の要素を出力してください
    System.out.println(languages[1]);
    
    
    String[] names = {"にんじゃわんこ", "ひつじ仙人", "ベイビーわんこ"};
    
    // for文を用いて、「私の名前は◯◯です」と出力してください
                 *配列名.lengthで配列内の要素の数だけ繰り返し処理する
                 今回の場合要素は３つなので i<3 まで表示
    for(int i=0;i<names.length;i++){
      System.out.println("私の名前は"+names[i]+"です");
    }
    
    *forの配列表示の拡張系
    　 (データ型 変数名:配列名)
    for(String name:names){
      System.out.println(name);
    }
}




class Main {   //1.メインメソッドが呼ばれる
  public static void main(String[] args) {
    hello();   //2.mainメソッド内のhelloメソッドが呼ばれる
  }
  
  public static void hello() {  //3.helloメソッド内の処理が実行
    // "Hello World"を、"Hello Java"に書き換えてください
    System.out.println("Hello World");
  }
}




class Main {
  public static void main(String[] args) {
    // 引数に「Kate Jones」を渡してください
    printData("Kate Jones", 27);  //引数
    
    // 引数に「John Christopher Smith」を渡してください
    printData("John Christopher Smith", 65);
    
  }

  // 引数を受け取るようにしてください
  public static void メソッド名(データ型　変数名)
  public static void printData(String name,int age) {
    // 「私の名前は◯◯です」と出力されるように書き換えてください
    System.out.println("私の名前は"+name+"です");
    // 「年齢は◯◯歳です」と出力してください
    System.out.println("年齢は"+age+"歳です");
    
    引数が変数名に代入され、その内部の処理も変更し実行される
  }
  
  class Main {
  public static void main(String[] args) {
    // fullNameメソッドの結果を変数nameに代入してください
    String name = fullName("Kate", "Jones");  --------------
                                                            |
    // printDataの引数を書き換えてください                  |
    printData(name, 27);                                    |
                                                            |
    // こちらは書き換えないでください                       |
    printData("John Christopher Smith", 65);                |
                                                            |
  }                                                         |
                                                            |
  public static void printData(String name, int age) {      |    //出力を行う記述がある場合public static void メソッド名(データ型　変数名)
    System.out.println("私の名前は" + name + "です");       |          // 私の名前はKate Jonesです　　　年齢は27歳です
    System.out.println("年齢は" + age + "歳です");          |         //　私の名前はJohn Christopher Smithです　　　年齢は65歳です
  }                                                         |
                                                            |
  // fullNameメソッドを定義してください       --------------              
  public static String fullName(String firstName, String lastName) {　　　　//returnで返す場合   データ型+ メソッド名
    return firstName + " " + lastName;
  }
  
}

}