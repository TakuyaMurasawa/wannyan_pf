例外
を使ってプログラミングしてみよう

---使用する制御文と関数---
Control statements and functions

例外	プログラムの実行中に発生したエラーのこと。
例外が発生した場合、例外が発生した箇所より後の処理は実行されない。

---------------------------------------------

---問 題---
examination

mainメソッドに0除算を行うprint文、その前後にそれぞれ”例外発生前”、”例外発生後”と表示するprint文を
記述して実行し、何と表示されるか確認しましょう。



結果
例外発生前
Exception in thread "main" java.lang.ArithmeticException: / by zero
	at Reigai01.main(JavaExec20220201104420.java:4)

class Reigai01 {
  public static void main(String[] args) {
    System.out.println("例外発生前");
    System.out.println(1 / 0);
    System.out.println("例外発生後");
  }
}



大きさ5のshort型の配列を作成し、for文で値を6個以上代入し、同時に値を表示するプログラムを作成・実行し、
何行表示されるか確認しましょう。

結果
0
1
2
3
4
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 5
	at Reigai02.main(JavaExec20220201105809.java:5)


class Reigai02 {
  public static void main(String[] args) {
    short[] s = new short[5];
    for (byte i = 0; i < 10; i++) {
      s[i] = i;
      System.out.println(s[i]);
    }
  }
}]


---問 題---
examination

0除算を行うprint文を記述したメソッドを作成し、mainメソッドでそのメソッドを呼び出しましょう。
その前後にそれぞれ”例外発生前”、”例外発生後”と表示するprint文を記述して実行し、何と表示されるか確認しましょう。

結果
例外発生前
Exception in thread "main" java.lang.ArithmeticException: / by zero
	at Reigai03.occur(JavaExec20220201105911.java:9)
	at Reigai03.main(JavaExec20220201105911.java:4)


class Reigai03 {
  public static void main(String[] args) {
    System.out.println("例外発生前");
    occur();
    System.out.println("例外発生後");
  }

  static void occur() {
    System.out.println(1 / 0);
  }
}






例外スタックトレース
を使ってプログラミングしてみよう

---使用する制御文と関数---------------------------------------------------------------------------------------------------
Control statements and functions

スタックトレース	
   処理でエラーが発生した時刻、原因、処理順序などのエラーの概要のこと

スタックトレースの読み方	
   例外クラス名: エラーの直接原因
   at クラス名.メソッド名(ファイル名:そのファイルの何行目か)

スタックトレースの例	
   Exception in thread "main" java.lang.ArithmeticException: / by zeroat Hello.main(Hello.java:4)
   ----------------------------------------------------------------------------------------------
   ArithmeticExceptionという例外クラス：0による割り算
   Helloクラスのmainメソッド（Hello.javaファイル：4行目)
  
----------------------------------------------------------------------------------------------------------------------------

--問 題---
examination

mainメソッドに0除算を行うprint文を記述し、実行してみましょう。

結果
Exception in thread "main" java.lang.ArithmeticException: / by zero
at ReigaiStackTrace01.main(JavaExec20220201122513.java:3)


---エディターでプログラミング---
Programming in the editor

class ReigaiStackTrace01 {
  public static void main(String[] args) {
    System.out.println(1 / 0);
  }
}




例外 throw
を使ってプログラミングしてみよう

---使用する制御文と関数-----------------------------------------------------------
Control statements and functions

例外クラス 変数名 = new 例外クラス();
throw 変数名;	例外を発生させる（やり方その１）
throw new 例外クラス();	例外を発生させる（やり方その２）

※例外を発生させるときは、上記のどちら記述を用いても差はありません。

----------------------------------------------------------------------------------

---問 題---
examination

throwによってIllegalArgumentExceptionが発生するようにしましょう。
その前後にそれぞれ”例外発生前”、”例外発生後”と表示するprint文を記述して実行し、
コンパイルエラーが発生することを確認しましょう。
※やり方その１の方法で試してみましょう。

結果
コンパイルエラー：
Error on line 7
in /util/JavaExec20220202171528.java:7: error: unreachable statement
System.out.println("例外発生後");
^

--エディターでプログラミング---
Programming in the editor

class ReigaiThrow01 {
  public static void main(String[] args) {
    System.out.println("例外発生前");
    IllegalArgumentException ex
               = new IllegalArgumentException();
    throw ex;
    System.out.println("例外発生後");
  }
}


---問 題---
examination

throwによってArithmeticExceptionが発生するようにしましょう。その際、mainメソッドに1行で記述しましょう。
また、その前後にそれぞれ”例外発生前”、”例外発生後”と表示するprint文を
記述して実行し、コンパイルエラーが発生することを確認しましょう。
※やり方その２の方法で試してみましょう。

結果
コンパイルエラー：
Error on line 5
in /util/JavaExec20220202172227.java:5: error: unreachable statement
System.out.println("例外発生後");
^


---エディターでプログラミング---
Programming in the editor

class ReigaiThrow03 {
  public static void main(String[] args) {
    System.out.println("例外発生前");
    throw new ArithmeticException();
    System.out.println("例外発生後");
  }
}




例外 try～catch
を使ってプログラミングしてみよう

---使用する制御文と関数--------------------------------------------------------
Control statements and functions

try {	例外が発生する部分を囲む
} catch (Exception e) {	例外発生時に実行する処理を囲む

---------------------------------------------------------------------------------

---問 題---
examination

0除算を行うprint文をtry～catchで適切に囲み、try～catch文の前後、0除算の前後、例外発生時の
5か所にそれぞれ異なるメッセージを表示するプログラムを作りましょう。

結果
try~catch前
除算前
例外発生
try~catchｍ後


class main{
    public static void main(String[] args){
        System.out.println("try~catch前");
        try{
            System.out.println("除算前");
            System.out.println(1/0);
            System.out.println("除算後");
        }catch(Exception e){
            System.out.println("例外発生");
        }
        System.out.println("try~catchｍ後");
    }
}


---問 題---
examination

2を-2から5までの数で割った結果を表示するprint文をtry～catchで適切に囲み、
try～catch文の前後、例外発生時の3か所にもそれぞれ異なるメッセージを表示するプログラムを作りましょう。

結果
try~catch前
-1
-2
例外発生
try~catch後


class main{
    public static void main(String[] args){
        System.out.println("try~catch前");
        try{
            for(int i=-2; i<6;i++){
                System.out.println(2/i);
            }
        }catch(Exception e){
            System.out.println("例外発生");
        }
        System.out.println("try~catch後");
    }
}


---問 題---
examination

RuntimeExceptionを生成してthrowするメソッドを作成しましょう。throws宣言を適切に記述しましょう。
mainメソッドでメソッドを実行しましょう。その際、適切にtry～catchしましょう。
また、例外をcatchした時は"例外発生"と表示しましょう。

結果
例外発生


class main{
    public static void main(String[] args){
        try{
            out();
        }catch(Exception e){
            System.out.println("例外発生");
        }
    }
    
    static void out() throws RuntimeException{
            throw new RuntimeException();
        }
}


---問 題---
examination

適当なクラスを作成し、NullPointerExceptionを生成してthrowするようにしましょう。throws宣言を適切に記述しましょう。
mainを持つクラスを作成し、上記クラスのメソッドを実行しましょう。その際、適切にtry～catchしましょう。
また、例外をcatchした時は"例外発生"と表示しましょう。

結果
例外発生


class main {
  public static void main(String[] args) {
    try {
      ReigaiThrowsTest03.ex();
    } catch (Exception e) {
      System.out.println("例外発生");
    }
  }
}


class ReigaiThrowsTest03 {
  public static void ex() throws NullPointerException {
    throw new NullPointerException();
  }
}




例外と継承
を使ってプログラミングしてみよう

---使用する制御文と関数---------------------------------------------------------------------
Control statements and functions

class クラス名 extends 例外 {
}	                                    例外を継承して例外クラスを宣言する

メソッド名 throws 例外	              発生した例外を呼び出し元に投げる

try {	
      例外が発生する部分を囲む
    } catch (Exception e) {	
      例外発生時に実行する処理を囲む
    }

----------------------------------------------------------------------------------------------
---問 題---
examination

ClassNotFoundExceptionを継承したクラスMadeException01を作成しましょう。
異なるクラスThrows01で先程作成した例外クラスをthrowするメソッドを作成しましょう。
mainを持つクラスReigaiExtends01を作成し、上記クラスのメソッドを実行しましょう。
その際、適切にtry～catchしましょう。
また、例外をcatchした時は"例外発生"と表示しましょう。

結果
例外発生



class ReigaiExtends01 {
  public static void main(String[] args) {
    try {
      Throws01.ex();
    } catch (Exception e) {
      System.out.println("例外発生");
    }
  }
}


class Throws01 {
  public static void ex() throws MadeException01 {
    throw new MadeException01();
  }

}


class MadeException01 extends ClassNotFoundException {

}



---問 題---
examination

ArithmeticExceptionを継承したクラスMadeException02を作成しましょう。
異なるクラスThrows02で先程作成した例外クラスをthrowするメソッドを作成しましょう。
mainを持つクラスReigaiExtends02を作成し、上記クラスのメソッドを実行しましょう。その際、適切にtry～catchしましょう。
また、例外をcatchした時は"例外発生"と表示しましょう。

結果
例外発生


class MadeException02 extends ArithmeticException{
    
}

class Throws02{
    static void out() throws MadeException02{
        throw new MadeException02();
    }
}

class ReigaiExtends02{
    public static void main(String[] args){
        try{
            Throws02.out();
        }catch(Exception e){
            System.out.println("例外発生");
        }
    }
}

上記と結果は同じだがthrow02がない場合----------------------------------------------------------------------
class MadeException02 extends ArithmeticException{
    
}

class ReigaiExtends02{
    public static void main(String[] args){
        try{
            MadeException02 out = new MadeException02();
            throw out;
        }catch(Exception e){
            System.out.println("例外発生");
        }
    }
}

---------------------------------------------------------------------------------------------------------------------




---問 題---
examination

ArrayIndexOutOfBoundsExceptionを継承したクラスMadeException03を作成しましょう。
異なるクラスThrows03で先程作成した例外クラスをthrowするメソッドを作成しましょう。
mainを持つクラスReigaiExtends03を作成し、上記クラスのメソッドを実行しましょう。
その際、適切にtry～catchしましょう。
また、例外をcatchした時は"例外発生"と表示しましょう。

結果
例外発生


class MadeException03 extends ArrayIndexOutOfBoundsException{
    
}

class Throws03{
    static void out() throws MadeException03{
        throw new MadeException03();
    }
}

class ReigaiExtends03{
    public static void main(String[] args){
        try{
            Throws03.out();
        }catch(Exception e){
            System.out.println("例外発生");
        }
    }
}