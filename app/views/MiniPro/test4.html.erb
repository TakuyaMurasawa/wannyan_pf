class Main {

	public static void main(String[] args) {

		//【問題】引数がfloat2つのメソッドwaterVaporと同じ名前で引数なしのメソッドwaterVaporを用意して、
		//「1m³の空気に含まれる水蒸気の質量」と、「その空気の温度の飽和水蒸気量」の値から
		//湿度を求めて表示するプログラムを完成させましょう。

		//★mainメソッド内でwaterVaporを呼び出してみましょう。★
		waterVapor();

	}

	//メソッドwaterVaporを作成します。
	//★一つ目の引数には「1m³の空気に含まれる水蒸気の質量」を表すfloat型の変数c,
	//二つ目の引数には「その空気の温度の飽和水蒸気量」を表すfloat型の変数dを与えてみましょう。★
	static void waterVapor (float c, float d) {

		//"1m³の空気に含まれる水蒸気の質量は c "と出力します。
		System.out.println("1m³の空気に含まれる水蒸気の質量は " + c );
		//★"その空気の温度の飽和水蒸気量は d "と出力してみましょう。★
        System.out.println("その空気の温度の飽和水蒸気量は"+ d );
		//★湿度を求める公式に変数cと変数dを当てはめて、
		//"c / d * 100"の結果が空欄部分に出力されるように記述してみましょう。★
        System.out.println("湿度"+ c / d *100 + "%");

	}

	//★引数なしのメソッドwaterVaporを作成してみましょう。★
	static void waterVapor () {

		//float型の変数cは5.0で初期化します。
		float c = 5.0F;
		//★float型の変数dを10.0で初期化してみましょう。★
        float d = 10.0f;
		//★変数c,dを引数として、waterVaporを呼び出してみましょう。★
        waterVapor(c,d);
	}

}



class Main{
	public static void main(String[] args) {
		//【問題】掛け算の穴埋めの答えを求めるコンストラクタを持つクラスを作成し、インスタンス化してみましょう。

		//★「Keisan」クラスをインスタンス化してみましょう。ただし、インスタンス名を「keisan」とし、引数には「8,16」を与えます。★
		
        Keisan keisan = new Keisan(8,16);　　　　　　　　//メソッドを選択せず、クラスを選択し引数だけ与える
	}
}


class Keisan{
	//★引数にint型の変数「x」「y」を持つコンストラクタを作成してみましょう。★
	Keisan(int x, int y){                                            //コンストラクタとは
		//穴埋めの答えを求めて表示します。　　　　　　　　　　　　　　　　クラスを引っ張ってきた際に、自動的に起動する手法
		System.out.println(y / x);　　　　　　　　　　　　　　　　　　　　X public static void Keisan は違います
	}　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　Keisan(){
	                                                                                System.out.println("");    
}                                                                                   }      これが正解




class Main {

	public static void main(String[] args) {
		//【問題】枕詞を指定し、そのことばから導かれる語をコンストラクタ内の処理で
		//出力するプログラムを作成しましょう。

		//枕詞「ちはやふる」から導かれる語を表示するコンストラクタを持つ
		//クラスChihayafuruをインスタンス化します。
		Chihayafuru obj = new Chihayafuru();

		//インスタンス化時にコンストラクタが実行され、コンストラクタ内の処理(出力)が
		//実行されていることを確認したら、別のクラスをインスタンス化して
		//コンストラクタが実行されていることを再度確認してみましょう。

	}

}
//枕詞「ひさかたの」から導かれる語を表示するコンストラクタを持つ
//クラスHisakatanoを作成しました。
class Hisakatano {
	//コンストラクタHisakatanoを作成しました。
	//コンストラクタはクラス名と同名にします。
	Hisakatano() {
		//枕詞から導かれる語を出力しました。
		System.out.println("ひさかたの->'光'");
	}
}

//★枕詞「あしひきの」から導かれる語を表示するコンストラクタを持つ
//クラスAshihikinoを作成してみましょう。★
class Ashihikino{
	//コンストラクタAshihikinoを作成しました。
	//コンストラクタはクラス名と同名にします。
	Ashihikino() {
		//枕詞から導かれる語を出力しました。
		System.out.println("あしひきの->'山'");
	}
}

//枕詞「くさまくら」から導かれる語を表示するコンストラクタを持つ
//クラスKusamakuraを作成しました。
class Kusamakura {
	//★コンストラクタKusamakuraを作成してみましょう。★
	Kusamakura() {
		//枕詞から導かれる語を出力しました。
		System.out.println("くさまくら->'旅'");
	}
}

//★枕詞「ちはやふる」から導かれる語を表示するコンストラクタを持つ
//クラスChihayafuruを作成してみましょう。★
class Chihayafuru {
	//★コンストラクタChihayafuruを作成してみましょう。★
	 Chihayafuru() {
		//枕詞から導かれる語を出力しました。
		System.out.println("ちはやふる->'神'");
	}
}
